@page "/Usuarios/FrmUsuario"
@inject ISnackbar SB
@inject sUsuario _sUsuario
@inject sDepartamento _sDepartamento
@using MudBlazor

<MudDialog>
    <DialogContent>
        <MudTextField T="int" @bind-Value="usuario1.Usuarioid" Label="ID"   Disabled="true" />
        <MudTextField T="string" @bind-Value="usuario1.Nombre" RequiredError="El nombre es requerido!" Label="Nombre" />
        <MudTextField T="string" @bind-Value="usuario1.Correo" RequiredError="El correo es requerido!" Label="Correo" />
        <MudAutocomplete T="string" @bind-Value="departamento1.Nombre" SearchFunc="Search" RequiredError="El departamento es requerido!" Label="Departamento" />
        <MudTextField T="int" @bind-Value="usuario1.Sueldo" Label="Sueldo" RequiredError="El sueldo es requerido!" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.AttachMoney" />
        <MudTextField T="DateTime?" @bind-Value="usuario1.Fecharegistro" Label="Fecha Registro" Disabled="true" />
        
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="Cancel">Cancelar</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Guardar">Enviar</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public mUsuario usuario1 { get; set; } = new mUsuario();

    [Parameter]
    public mDepartamento departamento1 { get; set; } = new mDepartamento();

    public List<mDepartamento> listaDepartamento = new List<mDepartamento>();

    private string OnDepartamentoChanged(int selectedDepartment)
    {
        string? nombre = "";
        mDepartamento departamento = listaDepartamento.FirstOrDefault(d => d.Departamentoid == selectedDepartment);
        nombre = departamento.Nombre;
        return nombre;
    }

    private int OnDepartamentoChangedID()
    {
        int id = 0;
        if(departamento1.Nombre != null)
        {
            mDepartamento departamento = listaDepartamento.FirstOrDefault(d => d.Nombre == departamento1.Nombre);
            id = departamento.Departamentoid;
        }
        
        return id;
    }

    private async Task<IEnumerable<string>> Search(string value, CancellationToken token)
    {
        listaDepartamento = await _sDepartamento.GetDepartamentos();

        if (usuario1.Departamento != null && usuario1.Departamento!=0)
            departamento1.Nombre = OnDepartamentoChanged(usuario1.Departamento);
        
        await Task.Delay(5, token);

        // Si el valor está vacío, devolver todos los nombres
        if (string.IsNullOrEmpty(value))
            return listaDepartamento.Select(d => d.Nombre);

        
        // Filtrar por nombre que contiene el valor ingresado
        return listaDepartamento
            .Where(d => d.Nombre.Contains(value, StringComparison.InvariantCultureIgnoreCase))
            .Select(d => d.Nombre);
    }

    private async void Guardar()
    {
        listaDepartamento = await _sDepartamento.GetDepartamentos();
        usuario1.Departamento = OnDepartamentoChangedID();

        if (string.IsNullOrEmpty(usuario1.Nombre))
        {
            SB.Add("Falta llenar el campo Nombre", Severity.Warning);
            return;
        }
        try
        {
            mResponse result = usuario1.Usuarioid > 0 ? (await _sUsuario.UpdateUsuarios(usuario1)) : (await _sUsuario.CreateUsuarios(usuario1));
            if (!result.error)
            {
                SB.Add("El usuario se ha actualizado con exito", Severity.Success);
                Cancel();

            }
            else
            {
                SB.Add(result.message, Severity.Error);
            }

        }
        catch (Exception)
        {
            SB.Add("No se pudo actualizar el registros.", Severity.Error);
        }


    }

    private void Cancel() => MudDialog.Cancel();

}

