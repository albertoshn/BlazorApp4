@page "/Usuarios/FrmUsuario"
@inject ISnackbar SB
@inject sUsuario _sUsuario
@inject sDepartamento _sDepartamento
@using MudBlazor

<MudDialog>
    <DialogContent>
        <MudTextField T="int" @bind-Value="usuario1.Usuarioid" Label="ID"   Disabled="true" />
        <MudTextField T="string" @bind-Value="usuario1.Nombre" RequiredError="El nombre es requerido!" Label="Nombre" />
        <MudTextField T="string" @bind-Value="usuario1.Correo" RequiredError="El correo es requerido!" Label="Correo" />
        <MudAutocomplete T="mDepartamento" @bind-Value="depSeleccionado" SearchFunc="Search2" ToStringFunc="NombreDep" RequiredError="El departamento es requerido!" Label="Departamento" />
        <MudTextField T="int" @bind-Value="usuario1.Sueldo" Label="Sueldo" RequiredError="El sueldo es requerido!" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.AttachMoney" />
        <MudTextField T="DateTime?" @bind-Value="usuario1.Fecharegistro" Label="Fecha Registro" Disabled="true" />
        
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="Cancel">Cancelar</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Guardar">Enviar</MudButton>
    </DialogActions>
</MudDialog>
<MudOverlay @bind-Visible="visible" DarkBackground="true" ZIndex="9999" AutoClose="true" />

@code {

    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public mUsuario usuario1 { get; set; } = new mUsuario();

    // [Parameter]
    // public mDepartamento departamento1 { get; set; } = new mDepartamento();
    #region PARAMETROS
    List<mDepartamento> listadoDepartamentos = new List<mDepartamento>();
    mDepartamento depSeleccionado = new mDepartamento();
    public List<mDepartamento> listaDepartamento = new List<mDepartamento>();
    private bool visible = false;
    #endregion
    //public Func<mDepartamento, string> NombreDep = p => p.Nombre;
    public string NombreDep(mDepartamento dep)
    {
        if(dep == null)
        {
            return "";
        }
        else
        {
            return dep.Nombre;
        }
    }


    protected override async void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                visible = true;
                StateHasChanged();
                listadoDepartamentos = await _sDepartamento.GetDepartamentos();

                if(usuario1 != null && usuario1.Usuarioid != 0)
                {
                    depSeleccionado = listadoDepartamentos.FirstOrDefault(x => x.Departamentoid == usuario1.Departamento);
                }

            }
            catch (Exception e)
            {
                SB.Add($"Ocurrió un erro: {e.Message}", Severity.Error);
                //SB.Add(string.Format("Ocurrió un error: {0}, continue con otra cosa.{1}",e.Message,1), Severity.Error);
            }
            finally
            {
                visible = false;
                StateHasChanged();
            }
        }
    }


    private string OnDepartamentoChanged(int selectedDepartment)
    {
        string? nombre = "";
        mDepartamento departamento = listaDepartamento.FirstOrDefault(d => d.Departamentoid == selectedDepartment);
        nombre = departamento.Nombre;
        return nombre;
    }

    // private int OnDepartamentoChangedID()
    // {
    //     int id = 0;
    //     if(departamento1.Nombre != null)
    //     {
    //         mDepartamento departamento = listaDepartamento.FirstOrDefault(d => d.Nombre == departamento1.Nombre);
    //         id = departamento.Departamentoid;
    //     }

    //     return id;
    // }

    private async Task<IEnumerable<mDepartamento>> Search2(string value, CancellationToken token)
    {
        if (string.IsNullOrEmpty(value))
        {
            depSeleccionado = new mDepartamento();
            return listadoDepartamentos;
        }

        List<mDepartamento> result = listadoDepartamentos.Where(x=> x.Nombre.Contains(value,StringComparison.CurrentCultureIgnoreCase)).ToList();
        if(result!= null && result.Any())
        {            
            return result;
        }
        else
        {
            depSeleccionado = new mDepartamento();
            return listadoDepartamentos;

        }

    }

    // private async Task<IEnumerable<string>> Search(string value, CancellationToken token)
    // {
    //     listaDepartamento = await _sDepartamento.GetDepartamentos();

    //     if (usuario1.Departamento != null && usuario1.Departamento!=0)
    //         departamento1.Nombre = OnDepartamentoChanged(usuario1.Departamento);


    //     // Si el valor está vacío, devolver todos los nombres
    //     if (string.IsNullOrEmpty(value))
    //         return listaDepartamento.Select(d => d.Nombre);


    //     // Filtrar por nombre que contiene el valor ingresado
    //     return listaDepartamento
    //         .Where(d => d.Nombre.Contains(value, StringComparison.InvariantCultureIgnoreCase))
    //         .Select(d => d.Nombre);
    // }

    private async void Guardar()
    {
        //listaDepartamento = await _sDepartamento.GetDepartamentos();

        if(depSeleccionado == null || depSeleccionado.Departamentoid == 0)
        {
            SB.Add("No se a seleccionado un departamento.", Severity.Error);
            return;
        }

        usuario1.Departamento = depSeleccionado.Departamentoid;   // OnDepartamentoChangedID();

        if (string.IsNullOrEmpty(usuario1.Nombre))
        {
            SB.Add("Falta llenar el campo Nombre", Severity.Warning);
            return;
        }
        try
        {
            mResponse result = usuario1.Usuarioid > 0 ? (await _sUsuario.UpdateUsuarios(usuario1)) : (await _sUsuario.CreateUsuarios(usuario1));
            if (!result.error)
            {
                SB.Add("El usuario se ha actualizado con exito", Severity.Success);
                Cancel();

            }
            else
            {
                SB.Add(result.message, Severity.Error);
            }

        }
        catch (Exception)
        {
            SB.Add("No se pudo actualizar el registros.", Severity.Error);
        }


    }

    private void Cancel() => MudDialog.Cancel();

}

