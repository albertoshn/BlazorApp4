@page "/Usuarios/Usuario"

@inject sUsuario _sUsuario
@inject sDepartamento _sDepartamento
@inject ISnackbar SB
@inject IDialogService DialogService

<MudGrid Class="pa-4">
    <MudItem xs="1"> 
        <MudGrid Class="pt-4 ps-xl-4" Justify="Justify.FlexStart">
            <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" aria-label="add" Size="Size.Small" OnClick="AgregarUsuario" />
        </MudGrid>
    </MudItem>
    <MudItem xs="10" Style="display:flex; align-items:center">
        <MudGrid Class="pa-2" Justify="Justify.Center">
            <MudText Typo="Typo.h6">Empleados</MudText>
        </MudGrid>
    </MudItem>
    <MudItem xs="1"></MudItem>
    <MudItem xs="12">
        <MudTable Items="@listadoUsuarios" Hover="true" FixedHeader="true" Dense="true" Striped="true" Bordered="true" Height=" 350px" Filter="new Func<mUsuario,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
            <ToolBarContent>
                <MudSpacer />
                <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Id</MudTh>
                <MudTh>Nombre</MudTh>
                <MudTh>Correo</MudTh>
                <MudTh>Departamento</MudTh>
                <MudTh>Sueldo</MudTh>
                <MudTh>Fecha Registro</MudTh>
                <MudTh>Acciones</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Id">@context.Usuarioid</MudTd>
                <MudTd DataLabel="Nombre">@context.Nombre</MudTd>
                <MudTd DataLabel="Correo">@context.Correo</MudTd>
                <MudTd DataLabel="Departamento">
                    @context.DepartamentoNombre
                    @* @(listadoDepartamento.FirstOrDefault(x=> x.Departamentoid == context.Departamento) == null ? 
                        "No asignado" : listadoDepartamento.FirstOrDefault(x => x.Departamentoid == context.Departamento)?.Nombre
                    ) *@
@* 
                    @if (context.Departamento != null)
                    {
                        @OnDepartamentoChanged(context.Departamento).Nombre
                    }
                    else
                    {
                        <em>No asignado</em>
                    } *@
                </MudTd>
                <MudTd DataLabel="Sueldo">@context.Sueldo</MudTd>
                <MudTd DataLabel="Fecha Registro">@context.Fecharegistro</MudTd>
                <MudTd DataLabel="Acciones">

                    <MudIconButton Color="Color.Warning" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" OnClick="@(() => EditarUsuario(context))" />

                    <MudIconButton Color="Color.Error" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" OnClick="@(() => EliminarUsuario(context))" />

                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="new int[]{10, 50, 100}" />
            </PagerContent>
        </MudTable>
    </MudItem>
</MudGrid>
<MudOverlay @bind-Visible="visible" DarkBackground="true" ZIndex="9999" AutoClose="true" />

@code {
    List<mUsuario> listadoUsuarios = new List<mUsuario>();
    List<mDepartamento> listadoDepartamento = new List<mDepartamento>();
    private string searchString1 = "";
    private mUsuario selectedItem1 = null;
    private HashSet<mUsuario> selectedItems = new HashSet<mUsuario>();
    private bool visible;

    private bool FilterFunc1(mUsuario element) => FilterFunc(element, searchString1);

    private bool FilterFunc(mUsuario element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Nombre.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.Usuarioid}".Contains(searchString))
            return true;
        return false;
    }

    // private mDepartamento OnDepartamentoChanged(int selectedDepartment)
    // {
    //     mDepartamento departamento;
    //     return departamento = listadoDepartamento.FirstOrDefault(d => d.Departamentoid == selectedDepartment);
    // }

    public async Task AgregarUsuario()
    {
        mUsuario usuario = new mUsuario();
        var parameters = new DialogParameters();
        parameters.Add("usuario1", usuario);
        var options = new DialogOptions { CloseOnEscapeKey = true };

        await DialogService.Show<FrmUsuario>("Agregar Empleado", parameters, options).Result;
        await refrescarTabla();
    }

    public async Task EditarUsuario(mUsuario usuario)
    {
       // mDepartamento depa = OnDepartamentoChanged(usuario.Departamento);
        var parameters = new DialogParameters();
        parameters.Add("usuario1", usuario);
        //parameters.Add("departamento1", depa);
        var options = new DialogOptions { CloseOnEscapeKey = true };

        await DialogService.Show<FrmUsuario>("Editar Empleado", parameters, options).Result;
        await refrescarTabla();
    }

    public async Task EliminarUsuario(mUsuario usuario)
    {
        mResponse resultado = await _sUsuario.DeleteUsuarios(usuario);
        if (!resultado.error)
        {
            SB.Add("El usuario se ha eliminado con exito", Severity.Success);
            await refrescarTabla();
        }
        else
        {
            SB.Add(resultado.message, Severity.Error);
        }
    }

    protected override async void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                visible = true;
                StateHasChanged();
                listadoDepartamento = await _sDepartamento.GetDepartamentos();
                await refrescarTabla();

            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
                visible = false;
                StateHasChanged();
            }
        }
    }

    private async Task refrescarTabla()
    {
        listadoUsuarios.Clear();
        listadoUsuarios = await _sUsuario.GetUsuarios();
        StateHasChanged();
    }

}
