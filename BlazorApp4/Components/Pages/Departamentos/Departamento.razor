@page "/Departamentos/Departamento"
@inject sDepartamento _sDepartamento
@inject ISnackbar SB
@inject IDialogService DialogService


<MudGrid Class="pa-4">
    <MudItem xs="1">
        <MudGrid Class="pt-4 ps-xl-4" Justify="Justify.FlexStart">
            <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" aria-label="add" Size="Size.Small" OnClick="OpenDialog" />
        </MudGrid>
    </MudItem>
    <MudItem xs="10" Style="display:flex; align-items:center">
        <MudGrid Class="pa-2" Justify="Justify.Center">
            <MudText Typo="Typo.h6">Departamento</MudText>
        </MudGrid>
    </MudItem>
    <MudItem xs="1"></MudItem>
    <MudItem xs="12">
        <MudTable Items="@listadoDepartamento" Hover="true" FixedHeader="true" Dense="true" Striped="true" Bordered="true" Height=" 350px">
            <HeaderContent>
                <MudTh>Id</MudTh>
                <MudTh>Nombre</MudTh>
                <MudTh Style="width: 150px; text-align: center;">Acciones</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Id">@context.Departamentoid</MudTd>
                <MudTd DataLabel="Nombre">@context.Nombre</MudTd>
                <MudTd Style="width: 150px;" DataLabel="Acciones">
                    <div style="display: flex; justify-content: center; gap: 10px;">
                        <MudIconButton Color="Color.Warning" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" OnClick="@(() => EditarDepartamento(context))" />

                        <MudIconButton Color="Color.Error" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" OnClick="@(() => EliminarDepartamento(context.Departamentoid))" />
                    </div>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="new int[]{10, 50, 100}" />
            </PagerContent>
        </MudTable>
    </MudItem>
</MudGrid>



@code {
    private List<mDepartamento> listadoDepartamento = new List<mDepartamento>();

    protected override async void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {

            // Lógica que solo se ejecuta después del primer renderizado.
            Console.WriteLine("Componente renderizado por primera vez.");
            try
            {
                await refrescar();

            }
            catch (Exception)
            {

                throw;
            }
            finally
            {
                StateHasChanged();
            }
        }
        else
        {
            // Lógica que se ejecuta después de cada renderizado.
            Console.WriteLine("Componente renderizado de nuevo.");
        }
    }

    private async Task refrescar()
    {
        listadoDepartamento.Clear();
        listadoDepartamento = await _sDepartamento.GetDepartamentos();
        StateHasChanged();
    }



    private async Task EditarDepartamento(mDepartamento depa)
    {
        var parameters = new DialogParameters();
        parameters.Add("departamento1", depa);
        var options = new DialogOptions { CloseOnEscapeKey = true };

        await DialogService.Show<FrmDepartamento>("Editar Departamento",parameters, options).Result;
        await refrescar();
    }

    private async Task OpenDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters();
        parameters.Add("Texto", "Crear Departamento");

        await DialogService.Show<FrmDepartamento>("Crear Departamento", options).Result;
        await refrescar();
    }
     
    private async Task EliminarDepartamento(int id)
    {
        mDepartamento departamento = new mDepartamento();
        departamento.Departamentoid = id;

        mResponse resultado = await _sDepartamento.DeleteDepartamento(departamento);
        if (!resultado.error)
        {
            SB.Add("El departamento se ha eliminado con exito", Severity.Success);
            await refrescar();
        }
        else
        {
            SB.Add(resultado.message, Severity.Error);
        }
    }

    

}
